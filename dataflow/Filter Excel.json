{
	"name": "Filter Excel",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "leadAndLag"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string,",
				"          Column_29 as string,",
				"          Column_30 as string,",
				"          Column_31 as string,",
				"          Column_32 as string,",
				"          Column_33 as string,",
				"          Column_34 as string,",
				"          Column_35 as string,",
				"          Column_36 as string,",
				"          Column_37 as string,",
				"          Column_38 as string,",
				"          Column_39 as string,",
				"          Column_40 as string,",
				"          Column_41 as string,",
				"          Column_42 as string,",
				"          Column_43 as string,",
				"          Column_44 as string,",
				"          Column_45 as string,",
				"          Column_46 as string,",
				"          Column_47 as string,",
				"          Column_48 as string,",
				"          Column_49 as string,",
				"          Column_50 as string,",
				"          Column_51 as string,",
				"          Column_52 as string,",
				"          Column_53 as string,",
				"          Column_54 as string,",
				"          Column_55 as string,",
				"          Column_56 as string,",
				"          Column_57 as string,",
				"          Column_58 as string,",
				"          Column_59 as string,",
				"          Column_60 as string,",
				"          Column_61 as string,",
				"          Column_62 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 filter(regexMatch(Column_2, \"AVFALL\") || regexMatch(Column_2, \"TJENESTER\") || regexMatch(Column_2,  '^\\\\d{7}$')) ~> filter1",
				"filter1 select(mapColumn(",
				"          Column_2,",
				"          Column_4,",
				"          Column_9,",
				"          Column_12,",
				"          Column_13,",
				"          Column_15",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateKey1",
				"SurrogateKey1 derive(dummy = 1,",
				"          partition = case(regexMatch(Column_2,  '^\\\\d{7}$'), toString(null()),Column_2)) ~> derivedColumn1",
				"derivedColumn1 window(over(dummy),",
				"     asc(sk, true),",
				"     partition = coalesce(partition, last(partition, true()))) ~> leadAndLag",
				"leadAndLag sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          numberOfMonths as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}