{
	"name": "Notater",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "01145e58-5772-4423-8481-fa25fe15945f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Use this to get json from Notebook\r\n",
					"# Define endpoint and parameters and get data\r\n",
					"# endpoint <- paste0(\"https://\", client_id, \"@frost.met.no/observations/v0.jsonld\")\r\n",
					"# sources <- 'SN18315,SN44640,SN50570'\r\n",
					"# elements <- 'mean(air_temperature P1D),sum(precipitation_amount P1D),mean(wind_speed P1D)'\r\n",
					"# elements <- 'mean(air_temperature P1D)'\r\n",
					"# referenceTime <- paste0('2023-01-01/', Sys.Date())\r\n",
					"# Build the URL to Frost\r\n",
					"# url <- paste0(\r\n",
					"#    endpoint, \"?\",\r\n",
					"#     \"sources=\", sources,\r\n",
					"#    \"&referencetime=\", referenceTime,\r\n",
					"#    \"&elements=\", elements\r\n",
					"#)\r\n",
					"# Issue an HTTP GET request and extract JSON data\r\n",
					"#xs <- try(jsonlite::fromJSON(URLencode(url),flatten=T))\r\n",
					"\r\n",
					"xs <- try(jsonlite::fromJSON(paste0(\"/synfs/\",jobId, \"/raw/oslo.json\")))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"library(notebookutils)\r\n",
					"mssparkutils.fs.help()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read json file from adls\r\n",
					"xs <- jsonlite::fromJSON(paste0(\"/synfs/\", jobId, \"/raw/data/oslo\"))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if the request worked, print out any errors, get observations\r\n",
					"if (class(xs) != 'try-error') {\r\n",
					"    df <- unnest(xs$data, cols = c(observations))\r\n",
					"    ## write json from Notebook if necessary\r\n",
					"    # write(jsonlite::toJSON(xs), paste0(\"/synfs/\",jobId, \"/raw/output.json\"))  \r\n",
					"    print(\"Data retrieved from frost.met.no and raw json file written to storage!\")\r\n",
					"} else {\r\n",
					"    print(\"Error: the data retrieval was not successful!\")\r\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"people <- read.json(\"abfss://raw@dlsingraphic01.dfs.core.windows.net/oslo\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df <- as.data.frame(jsonlite::fromJSON(jsonlite::toJSON(xs), force=TRUE), cols = c(observations))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.env.getUserName()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"%matplotlib inline\r\n",
					"plt.plot([0, 1, 2, 3, 4], [0, 3, 5, 9, 11]) \r\n",
					"plt.xlabel('Months') \r\n",
					"plt.ylabel('Books Read') \r\n",
					"# plt.show()\r\n",
					"# retrieve the job-id from the Spark environment \r\n",
					"jobId = mssparkutils.env.getJobId() \r\n",
					" \r\n",
					"# now save the image as a png file to the location we've mounted before \r\n",
					"plt.savefig(f\"/synfs/{jobId}/data/books.png\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"curpath = os.path.abspath(os.curdir)\r\n",
					"print(\"Current path is: %s\" % (curpath))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# we need to define the linked service, which for me is Workspaces \r\n",
					"# and the name of the workspace, which for me is my own name \r\n",
					"mssparkutils.fs.unmount('/raw/data') \r\n",
					"mssparkutils.fs.mount(\"abfss://raw@dlsingraphic01.dfs.core.windows.net/data\",\"/raw/data\",{\"linkedService\":\"syn-ingraphic-01-WorkspaceDefaultStorage\"}) "
				]
			}
		]
	}
}